#!/bin/bash
#
# SCRIPT: esatool
# ORIGINAL AUTHOR: Pablo Trigo
# AUTHOR: Aaron Martin
# DATE: February 12, 2018
# REV: 3.0
#
# PLATFORM: Linux Centos (Security Analytics 10.3, 10.4 ,10.5, 10.6) ESA APPLIANCE
#
# PURPOSE: Troubleshooting tool for ESA
# LICENSE: GNU Public License v2 (http://gnu.org/licenses/)
# Copyright (C) 2016 Pablo Trigo
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
###################################################################################
#
#
# Changelog 2.1 rev1
# - Fixed code issue in license option
# - Modified option 5 to skip the count (heavy loaded mongodbs)
# - Added 10.6 support
# Changelog 2.1 rev2
# - Fixed code issue in esaclient
# - Added option to skip the precheck
# - Displayed the current version of ESA in the menu
# - Added nextgen section in precheck section
#
# GLOBAL VARIABLES

#The following section checks through and sees what kind of server this is as 11.0 can have split ESA databases.

ESA_MAJOR_SERVER_VER=`rpm -qa | grep rsa-nw-esa-server | cut -d'-' -f5 | cut -d'.' -f1`
ESA_EXISTS=true
if [[ -z "$ESA_MAJOR_SERVER_VER" ]]; then
  #Check to see if respond-server is installed in 11.0
  ESA_MAJOR_SERVER_VER=`rpm -qa | grep rsa-nw-respond-server | cut -d '-' -f5 | cut -d '.' -f1`
  ESA_EXISTS=false
fi

if [[ $ESA_MAJOR_SERVER_VER == "11" ]] ; then
  ESA_SERVER_VER=`rpm -qa | grep rsa-nw-esa-server | cut -d'-' -f5 | cut -d'.' -f2`
  ESA_CLIENT_VER=`rpm -qa | grep rsa-nw-esa-client | cut -d'-' -f5 | cut -d'.' -f2`
  ESA_SERVER_EXACTVER=`rpm -qi rsa-nw-esa-server | grep Version | awk '{print $3}'`
  #Default ESA user and password for 11.0
  ESA_USER="deploy_admin"
  ESA_PASSWORD="netwitness"
  ESA_DATABASE="respond-server"
else
  ESA_MAJOR_SERVER_VER=`rpm -qa | grep rsa-esa-server | cut -d'-' -f4 | cut -d'.' -f1`
  ESA_SERVER_VER=`rpm -qa | grep rsa-esa-server | cut -d'-' -f4 | cut -d'.' -f2`
  ESA_CLIENT_VER=`rpm -qa | grep rsa-esa-client | cut -d'-' -f4 | cut -d'.' -f2`
  ESA_SERVER_EXACTVER=`rpm -qi rsa-esa-server | grep Version | awk '{print $3}'` 
  # Default ESA user and password for 10.6
  ESA_USER="esa"
  ESA_PASSWORD="esa"
  ESA_EXISTS=true
fi

#If parameters are added, overwrite the default values
if [[ $1 == "-p" ]]; then
  echo -e "Please provide the user to login with."
  if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
    echo -e "By default in 11.X, it's 'deploy_admin':"
  else
    echo -e "By default in 10.6, it's 'esa':"
  fi
  read -e ESA_USER

  echo -e "Please provide the password to login with to your ESA database."
  if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
    echo -e "By default in 11.X, it's your Deployment password:"
  else
    echo -e "By default in 10.6, it's 'esa':"
  fi
  read -e -s ESA_PASSWORD

  #ESA in 11.0 has the potential for a custom database name.
  if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
    echo -e "Please provide the name of the database to use for your ESA installation."
    echo -e "Example: respond-server"
    read -e ESA_DATABASE
  fi
fi

MONGO_PORT="27017" 

TODAY=`date +%Y-%m-%d`
YESTERDAY=`date -d "-1 day" +"%Y-%m-%d"`
DEFAULT_FROM_HOUR="00:00:00"
DEFAULT_TO_HOUR="23:59:59"

# Default IM user and Passwor
IM_USER="im"
IM_PASSWORD="im"

SAVEIFS=$IFS
# Change default limiter for
IFS=$(echo -en "\n\b")

## FUNCTIONS
#
# Version is 10.X
minimal_check(){
  if ([[ $ESA_MAJOR_SERVER_VER == 10 ]] && ([[ $ESA_SERVER_VER == 3 ]] || [[ $ESA_SERVER_VER == 4 ]] || [[ $ESA_SERVER_VER == 5 ]] ||
     [[ $ESA_SERVER_VER == 6 ]])) || [[ $ESA_MAJOR_SERVER_VER == 11 ]] ; then
    echo -e "ESA VERSION DETECTED: $ESA_SERVER_EXACTVER"
  else
      echo -e "ESA VERSION NOT DETECTED OR SUPPORTED $ESA_SERVER_EXACTVER..."
      exit 1
  fi
}

#######################################
# Prints a message in color
# Globals: NONE
# Arguments:
#   $1 message
#   $2 color (0 - 31)
# Returns: NONE
#######################################

option_selected() {

    COLORS=(
    '\e[0;30m' # Black - Regular - 0
    '\e[0;31m' # Red - 1
    '\e[0;32m' # Green - 2
    '\e[0;33m' # Yellow - 3
    '\e[0;34m' # Blue - 4
    '\e[0;35m' # Purple - 5
    '\e[0;36m' # Cyan - 6
    '\e[0;37m' # White - 7
    '\e[1;30m' # Black - Bold - 8
    '\e[1;31m' # Red - 9
    '\e[1;32m' # Green - 10
    '\e[1;33m' # Yellow - 11
    '\e[1;34m' # Blue - 12
    '\e[1;35m' # Purple - 13
    '\e[1;36m' # Cyan - 14
    '\e[1;37m' # White - 15
    '\e[4;30m' # Black - Underline - 16
    '\e[4;31m' # Red - 17
    '\e[4;32m' # Green - 18
    '\e[4;33m' # Yellow - 19
    '\e[4;34m' # Blue - 20
    '\e[4;35m' # Purple - 21
    '\e[4;36m' # Cyan - 22
    '\e[4;37m' # White - 23
    '\e[40m'   # Black - Background - 24
    '\e[41m'   # Red - 25
    '\e[42m'   # Green - 26
    '\e[43m'   # Yellow - 27
    '\e[44m'   # Blue - 28
    '\e[45m'   # Purple - 29
    '\e[46m'   # Cyan - 30
    '\e[47m'   # White - 31
 )
    RESET='\033[00;00m' # normal white
    MESSAGE=$1
    echo -e "${COLORS[$2]}${MESSAGE}${RESET}"
}

print_ok(){
  echo "[`option_selected "OK" "2"`]"
}

print_nok(){
  echo "[`option_selected "NOK" "1"`]"
}


#######################################
# Check the IP format
# Globals: NONE
# Arguments: $1 IP to check
# Returns: 0 Format OK
#          1 Format NOK
#######################################

check_ip() {
   if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
   then
       return 0
   else
       return 1
   fi
}

#######################################
# Check if the PORT is reachable in the provided IP
# Globals: NONE
# Arguments: $1 PORT to check
#            $2 IP to check
# Returns: 0 if the port is reachable
#          1 if the port is unreachable
#######################################

port_chkcon(){

echo "Checking Port $1 -> $2"
timeout 5 bash -c "cat < /dev/null > /dev/tcp/$2/$1"

if [[ $? -eq 0 ]]; then
 option_selected "connection OK port $1" "2"
 return 0
else
 option_selected "connection NOK port $1" "1"
 return 1
fi

}

#######################################
# Check database size
# Globals: $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

database_size(){

if [[ $ESA_MAJOR_SERVER_VER == 11 ]] ; then
  ALERT_DATABASE_SIZE=`mongo admin -u $ESA_USER -p $ESA_PASSWORD  --quiet --eval 'db.getSiblingDB('"'$ESA_DATABASE'"').alert.storageSize()'`
  MEGABYTE_SIZE=1048576
  ALERT_DATABASE_SIZE=$((ALERT_DATABASE_SIZE / MEGABYTE_SIZE))

  if [[ -z "$ALERT_DATABASE_SIZE" ]]; then
    option_selected "Alert collection not found." "1"
    option_selected "If you are trying to clear the Alert database and also on Netwitness L&P 11.0, the ESA Alert Database may not be on the ESA box." "3"
    option_selected "You can check the settings of ESA database storage by going to the Respond-Server Explore View and check under these nodes in the UI:" "3"
    option_selected "1. data/application" "3"
    option_selected "2. data/control" "3"
  else
    echo -e "Alert Database Size: $ALERT_DATABASE_SIZE Megabytes" 
  fi
else
  DATABASE_SIZE=`echo 'show collections' | mongo esa -u $ESA_USER -p $ESA_PASSWORD | grep alert`

  if [[ -z "$DATABASE_SIZE" ]]; then
    option_selected "No alert collection found" "1"
  else
    echo -e $DATABASE_SIZE
  fi
fi
}


#######################################
# Mongodb path check
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_mongodbpath(){
if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
  CHECK_MONGODBPATH=`egrep -i "dbPath" /etc/mongod.conf`
else
  CHECK_MONGODBPATH=`egrep -i "^dbpath" /etc/tokumx.conf`
fi

if [[ -z "$CHECK_MONGODBPATH" ]]; then
        option_selected "No mongodb path found in Mongo/TokumX Config File" "1"
else
        echo -e $CHECK_MONGODBPATH
fi
}

#######################################
# Checks date and format YYYY-MM-DD
# Globals: NONE
# Arguments: $1 Date to check
# Returns: 0 if the date is OK
#          1 if the date is NOK
#######################################

check_date(){
 date_check=`date "+%Y-%m-%d" -d "$1"  > /dev/null 2>&1 ;echo $?`
 date_check2=`echo $1 | awk -F '-'  '{ print ($1 > 1900 && $1 < 2100 && $2 <= 12 && $2!="" && $3!="" && $3 <= 31) ? "0" : "1"}'`
 if [[ $date_check == "0" && $date_check2 == "0" ]];then
  return 0
 else
  return 1
 fi
}

#######################################
# Checks hour and format HH:MM:SS
# Globals: NONE
# Arguments: $1 Hour to check
# Returns: 0 if the hour is OK
#          1 if the hour is NOK
#######################################

check_hour(){

hour_check=`date "+%H:%M:%S" -d "$1" > /dev/null 2>&1; echo $?`
hour_check2=`echo $1 | awk -F ':' '{ print ( $1 <= 23 && $2 <= 59 && $2!="" && $3!="" && $3 <= 59) ? "0" : "1"}'`

if [[ $hour_check == "0" && $hour_check2 == "0" ]]; then
  return 0
else
  return 1
fi
}

#######################################
# Check partition size
# Globals: NONE
# Arguments: $1 limit
# Returns: NONE
#######################################

check_partitions(){

for partition in $(df -Ph | grep -v Filesystem)
do
  PART=`echo $partition | awk '{print $1," ",$6}'`
  USAGE=`echo $partition | awk '{print $5}'| tr -d '%'`
  if [[ "$USAGE" -gt "$1" ]]; then
    option_selected "*********************************************" "1"
    option_selected "           PARTITION OVER $1 %              " "2"
    option_selected "*********************************************" "1"
   echo "$PART - usage $USAGE% `print_nok`"
  fi
done

}

#######################################
# Check core services
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_services(){

  option_selected "                   SERVICES                  " "2"
  option_selected "***************************************************" "1"

  if [[ $ESA_MAJOR_SERVER_VER == "11" ]] ; then
    #This may be a Respond Server and not an ESA
    if [[ $ESA_EXISTS == true ]]; then
      check_service rsa-nw-esa-analytics-server 1
    else
      check_service rsa-nw-respond-server 1
    fi 
    check_service rabbitmq-server 1
    check_service sshd 1 
    check_service mongod 1 
    check_service collectd 1 
  else
    check_service rsa-esa 1 | tr -d '\n'
    check_service rabbitmq-server 1 | tr -d '\n'
    check_service sshd 1
    check_service puppet 1 | tr -d '\n'
    check_service ntpd 1 | tr -d '\n'
    check_service tokumx 1 | tr -d '\n'
    check_service collectd 1 | tr -d '\n'
    check_service mcollective 1 
  fi

}

#######################################
# Check service status
# Globals: NONE
# Arguments: $1 service name to check
# Returns: 0 if running 1 if stopped
#######################################

check_service(){

CHECK_SERVICE_VERBOSE=$2

#If we are dealing with 11.X
if [[ $ESA_MAJOR_SERVER_VER == 11 ]] ; then
  SERVICE_STATUS=`systemctl is-active $1 | grep -i "active"`
  if [[ $SERVICE_STATUS == "inactive" ]] ; then
    SERVICE_STATUS=""
  fi
#Else we are on 10.X
else
  SERVICE_STATUS=`service $1 status | grep -i "running"`
fi
if [[ -z $SERVICE_STATUS ]]; then
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_nok`"
  fi
  return 1
else
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_ok`"
  fi
  return 0
fi

}

#######################################
# Check init service status
# Globals: NONE
# Arguments: $1 service name to check
# Returns: 0 if running 1 if stopped
#######################################

check_init_service(){

CHECK_SERVICE_VERBOSE=$2
SERVICE_STATUS=`status $1 | grep -i "running"`
if [[ -z $SERVICE_STATUS ]]; then
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_nok`"
  fi
  return 1
else
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_ok`"
  fi
  return 0
fi

}

#######################################
# Stops puppet and esa services
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

stop_services(){
# Check if the service is already stopped
if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
  #If this is the ESA Server, restart ESA service
    if [[ $ESA_EXISTS == true ]]; then
      systemctl stop rsa-nw-esa-analytics-server
      systemctl stop rsa-nw-esa-server
    else
      systemctl stop rsa-nw-respond-server 
    fi 
else
  check_service puppet
  if [[ $? -eq 0 ]]; then
    service puppet stop
  fi
  check_service rsa-esa
  if [[ $? -eq 0 ]]; then
    service rsa-esa stop
  fi
fi

}

#######################################
# Starts puppet and esa services
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

start_services(){
if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
  #If this is the ESA Server, restart ESA service
    if [[ $ESA_EXISTS == true ]]; then
      systemctl start rsa-nw-esa-analytics-server
      systemctl start rsa-nw-esa-server 
    else
      systemctl start rsa-nw-respond-server 
    fi 
else
    check_service puppet
    if [[ $? -eq 1 ]]; then
      service puppet start
    fi
    check_service rsa-esa
    if [[ $? -eq 1 ]]; then
      service rsa-esa start
    fi
fi


}

#######################################
# Stops Incident Manager service
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

stop_im(){

  check_service puppet
  if [[ $? -eq 0 ]]; then
    service puppet stop
  fi
    check_service puppet
  if [[ $? -eq 0 ]]; then
      service rsa-im stop
  fi

}

#######################################
# Starts Incident Manager service
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

start_im(){

  check_service puppet
  if [[ $? -eq 1 ]]; then
    service puppet start
  fi
    check_service puppet
  if [[ $? -eq 1 ]]; then
      service rsa-im start
  fi
}

#######################################
# Check ntp
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_ntp(){

  option_selected "***************************************************\n" "1"
  option_selected "    NTP CONFIG  *`date`*                     " "2"
  option_selected "***************************************************\n" "1"
  ntpq -p -n
  option_selected "Configured server/s in /etc/ntp.conf" "3"
  grep -i "server" /etc/ntp.conf | egrep -v "^#"
}

#######################################
# Check IM,ESA collections auth
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $IM_USER
#          $IM_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################
check_credentials(){

if [[ $ESA_MAJOR_SERVER_VER == 11 ]] ; then
  ESA_TEST_CONN=`echo "" | mongo admin -u $ESA_USER -p $ESA_PASSWORD --quiet| wc -c`
else
  ESA_TEST_CONN=`echo "" | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet| wc -c`
  IM_TEST_CONN=`echo "" | mongo im -u $IM_USER -p $IM_PASSWORD --quiet| wc -c`
fi
  if [[ "$ESA_TEST_CONN" != "0" ]]; then
    echo -e "Connection failed to tokumx in ESA, verify tokumx status and credentials"
    echo -e "You can now pass credentials through the command line while running this command."
    echo -e "Try: esatool -p"
    if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
      echo -e "In a default 11.0 installation, the username is deploy_admin and the password you used during the deployment of 11.0"
    fi
    exit 0
  fi

  if [[ "$IM_TEST_CONN" != "0" && $ESA_MAJOR_SERVER_VER != "11" ]]; then
    echo -e "Connection failed to tokumx in ESA, verify tokumx status and credentials"
    echo -e "Credentials can be modified in /usr/bin/esatool"
    echo -e 'IM_USER="youruserifdifferent" and IM_PASSWORD="yourpassword"'
    exit 0
  fi
}

#######################################
# Check current and available kernels
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_kernels(){

  AVAILABLE_KERNELS=`find /boot/ -name initramfs* | sort -n`
  RUNNING_KERNEL=`uname -a`

  option_selected "\n***************************************************" "1"
  option_selected "                   KERNEL                    " "2"
  option_selected "***************************************************" "1"
  option_selected "Running:" "3"
  echo "$RUNNING_KERNEL"
  option_selected "Available:" "3"
  echo "$AVAILABLE_KERNELS"

}

check_memory(){

  option_selected "\n***************************************************" "1"
  option_selected "                   MEMORY(MB)                " "2"
  option_selected "***************************************************" "1"
  free -mt

}

check_enablement(){

  option_selected "\n***************************************************" "1"
  option_selected "                   ENABLEMENT                " "2"
  option_selected "***************************************************" "1"
  option_selected "Checking PUPPET port in SA SERVER" "3"
  port_chkcon "8140" $SA_IP
  option_selected "Checking MCOLLECTIVE port in ESA" "3"
  port_chkcon "61614" 127.0.0.1
  option_selected "Checking HTTP port in SA SERVER" "3"
  port_chkcon "80" $SA_IP

  echo -e "Advice troubleshooting (if necessary):"
  echo -e "Check if port 61614 (TCP) is reachable from SA SERVER"
  echo -e "In SA SERVER: curl -v ESAIP:61614"
  echo -e "Check iptables -L -n in ESA"
}

#######################################
# Enforce to true Eventtime
# Globals: $ESA_CLIENT_VER
# Arguments: NONE
# Returns: NONE
#######################################
# exit func for no esaclient and for 5 and 6 change path esa-client
check_event_time(){
  option_selected "\n***************************************************" "1"
  option_selected "       EVENT_TIME VAR(empty if esa-client timeout)  " "2"
  option_selected "***************************************************" "1"

  if [[ -z "$ESA_CLIENT_VER" ]]; then
    option_selected "ESA CLIENT NOT INSTALLED" "3"
    option_selected "Check in ESA > EXPLORE VIEW > CEP > ENGINE > CONFIGURATION" "3"
    option_selected "(>10.4) ESA > EXPLORE VIEW > CEP > ENGINE > CEPENGINE" "3"
    option_selected "UsingEventTime must be TRUE" "3"
  else
      if [[ "$ESA_SERVER_VER" -eq 5 || "$ESA_SERVER_VER" -eq 6  ]]; then
    #statements
        echo -e "cd /CEP/Engine/cepEngine" > /tmp/esa_patch.esatool
        echo -e "set UsingEventTime --value true" >> /tmp/esa_patch.esatool
      elif [[ "$ESA_SERVER_VER" -eq 4 ]]; then
        #statements
        echo -e "cd /CEP/Engine/configuration" > /tmp/esa_patch.esatool
        echo -e "set UsingEventTime --value true" >> /tmp/esa_patch.esatool

      else
        echo -e "ESA VERSION UNKNOWN!!!"
        return 1
      fi
      timeout 15 /opt/rsa/esa/client/bin/esa-client --cmdfile /tmp/esa_patch.esatool
      sleep 1
      rm -f /tmp/esa_patch.esatool
  fi

}

#######################################
# Nextgen esa check
# Globals: $ESA_CLIENT_VER
# Arguments: NONE
# Returns: NONE
#######################################

check_nextgen(){

  option_selected "\n***************************************************" "1"
  option_selected "     NEXTGEN CHECK (empty if esa-client timeout)   " "2"
  option_selected "***************************************************" "1"

if [[ $ESA_CLIENT_VER ]]; then
  echo -e "cd /nextgen" > /tmp/esa_patch.esatool
  echo -e "get ." >> /tmp/esa_patch.esatool
  timeout 5 /opt/rsa/esa/client/bin/esa-client --cmdfile /tmp/esa_patch.esatool
  sleep 1
  rm -f /tmp/esa_patch.esatool
else
  option_selected "ESA CLIENT NOT INSTALLED, ABORTING CHECK" "3"
fi
read -p "Press enter to continue the precheck"
}
#######################################
# Global health check
# Globals: $SA_IP
# Arguments: NONE
# Returns: NONE
#######################################

health_check(){
  option_selected "                 HEALTH CHECK" "3"
  option_selected "***************************************************" "1"

  check_services
  option_selected "***************************************************" "1"
  option_selected "Current MONGODB path" "3"
  check_mongodbpath
  option_selected "Database collection size(s)" "3"
  database_size
}

#######################################
# Generates the precheck menu
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

show_menu_precheck(){
  option_selected "        ___                  __             __  " "4"
  option_selected "       / _ \ ____ ___  ____ / /  ___  ____ / /__" "4"
  option_selected "      / ___// __// -_)/ __// _ \/ -_)/ __//  '_/" "4"
  option_selected "     /_/   /_/   \__/ \__//_//_/\__/ \__//_/\_\ " "3"
  echo -e "\n"
}

#######################################
# Generates the main menu
# Globals: NONE
# Arguments: $1 (ESA SERVER VERSION)
# Returns: NONE
#######################################
show_menu(){
clear
health_check
option_selected "        ____ ____ ___  ______ ____   ____   __ " "4"
option_selected "       / __// __// _ |/_  __// __ \ / __ \ / / " "4"
option_selected "      / _/ _\ \ / __ | / /  / /_/ // /_/ // /__" "4"
option_selected "     /___//___//_/ |_|/_/   \____/ \____//____/" "4"

if [[ $ESA_MAJOR_SERVER_VER == 10 && $ESA_SERVER_VER == 6 ]]; then
  option_selected "            RSA SECURITY (ESA $ESA_SERVER_EXACTVER) v3.0" "3"
  option_selected "****************************************************" "1"
  echo -e "** 0) System Activity Report"
  echo -e "** 1) Count all alerts sorted by rules "
  echo -e "** 2) Count alerts in date range "
  echo -e "** 3) Delete alerts associated to a rule "
  echo -e "** 4) Delete date range of alerts associated to a rule or all rules(COUNT optional)"
  echo -e "** 5) Delete ALL IM alerts and incidents"
  echo -e "** 6) Parse running rules in ESA "
  #echo -e "** 7) List module_id - rule name "
  echo -e "** 7) DELETE ALL ALERTS"
  echo -e "** 8) Index optimization ESA"
elif [[ $ESA_MAJOR_SERVER_VER == 11 ]] ; then
    option_selected "            RSA SECURITY (ESA $ESA_SERVER_EXACTVER) v3.0" "3"
  option_selected "****************************************************" "1"
  echo -e "** 0) System Activity Report"
  echo -e "** 1) Count all alerts sorted by rules "
  echo -e "** 2) Count alerts in date range "
  echo -e "** 3) Delete alerts associated to a rule "
  echo -e "** 4) Delete date range of alerts associated to a rule or all rules(COUNT optional)"
  echo -e "** 5) Parse running rules in ESA "
  #echo -e "** 6) List module_id - rule name "
  echo -e "** 6) DELETE ALL ALERTS"
  echo -e "** 7) Index optimization ESA"
else
  echo -e "FUTURE VERSION?"
fi
  option_selected "********************************************************" "1"
  echo -e "Please enter a menu option and enter or enter to exit."
  read -e opt
}

#######################################
# Discovers the SA SERVER IP
# Globals: NONE
# Arguments: $1 ($ESA_SERVER_VER)
# Returns: NONE
#######################################

precheck_esatool(){

# LEGACY ONLY DISPLAYING COMMANDS IN VERSION 10.3
echo -e "Do you want to do a precheck in ESA?[Y/n]"
read -e precheck_input1
precheck_input1=${precheck_input1:="Y"}
case $precheck_input1 in
                [yY][eE][sS]|[yY])

  # Service checks
  check_services
  check_ntp
  check_partitions 80
  check_credentials
  check_kernels
  check_memory

  if [[ $ESA_MAJOR_SERVER_VER != 11 ]] ; then
    # Versions 10.4, 10.5, 10.6 use puppetmaster.local as SA SERVER IP
    # SA SERVER IP CHECK START
    SA_IP=`grep "puppetmaster.local" /etc/hosts | awk '{ print $1 }' | sort -u`
    option_selected "\nCHECK SA SERVER IP" "2"
    option_selected "******************" "3"
    echo -e "Checking if SA server ip is correct in /etc/hosts\n"

    check_ip $SA_IP
    if [[ $? -eq 0 ]]; then
      echo "SA SERVER IP ($SA_IP) `print_ok`"
    else
      precheck_test="N"
      option_selected "SA server is NOK, please check /etc/hosts" "1"
      option_selected "EXAMPLE:" "2"
      option_selected "192.168.1.200 puppetmaster.local" "2"
    fi

    if [[ "$precheck_test" == "N" ]]; then
      sa_ip_check="N"
    else
      read -ep "Is it correct? [Y/n]" sa_ip_check
      sa_ip_check=${sa_ip_check:="Y"}
    fi

    case $sa_ip_check in
      [Nn])
      echo -e "Introduce the SA Server IP:"
      read -e sa_ip_check
      check_ip $sa_ip_check
      until [[ $? -eq 0 ]]
       do
        echo "Introduce the correct SA SERVER ip:"
        read -e sa_ip_check
        check_ip $sa_ip_check
      done
      echo -e "\n$sa_ip_check seems a correct ip `print_ok`"
      SA_IP=$sa_ip_check
      ;;
    esac

    check_event_time
    check_nextgen
    check_enablement
    
    ### EXTRA ENABLEMENT SECTION
      NODE_ID=`cat /var/lib/puppet/node_id`
      if [[ $NODE_ID == "" ]]; then
        echo -e "NODE ID NOT DETECTED, check if /var/lib/puppet/node_id exists"
      else
        echo -e "NODE_ID: $NODE_ID"
        echo -e "Check classes (base,esa)"
        echo "db.nodes.find({\"node\":\"$NODE_ID\"}).forEach(printjson)" | mongo $SA_IP/puppet
      fi

    option_selected "\n***********************************************" "3"
  fi
    ;;
    *)
    # DO NOTHING
    ;;
  esac
  read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Full Health Check
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

System_Activity_Report() {

sar -A
option_selected "********************************************************" "1"
option_selected "Check man sar for help" "3"
read -p "Press [Enter] to return to the Main Menu"

}
#######################################
# Prints alerts (name::count::moduleid)
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

Count_All_Alerts() {

echo -e "Currently counting alerts in the collection. This may take a while..."
if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
  COUNT_ALERTS=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --quiet --eval 'db.getSiblingDB('"'$ESA_DATABASE'"').alert.aggregate( \
  {$group: { _id : "$originalHeaders.name" , count : {$sum : 1}}})' | \
  egrep "id|count" | tr -d '\t' | cut -d '"' -f1,4,7 | sort -k 3` 
  echo -e "Alert Name : Number of Occurences"
  echo -e $COUNT_ALERTS | sed 's/} {/}\n{/g' | tr -d '{' | tr -d '}'

elif [[ $ESA_MAJOR_SERVER_VER == 10 ]] && [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then

  COUNT_ALERTS=`echo 'db.alert.aggregate([{ $group: { _id: "$module_name",\
  count: { $sum: 1 }}},{ $sort: { count: 1 } }])' | \
  mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet | \
  egrep "id|count" | tr -d '\t' | sed ':a;N;$!ba;s/,\n/,/g' | cut -d '"' -f4,7 |\
  tr -d '"'`
  COUNT_ALERTS=`echo -e "$COUNT_ALERTS" | sed 's/ :/:/g'`
  ROW_COUNT=`echo -e "$COUNT_ALERTS" | wc -l`

  option_selected "RULE_NAME :: MODULE_ID :: COUNT\n" "2"

  for alert_info in $(echo -e "$COUNT_ALERTS"); do
   ALERT_NAME=`echo -e $alert_info | cut -d':' -f1`

   ALERT_MODULEID=`echo "db.alert.find({module_name:\"${ALERT_NAME}\"}, {module_id: 1}).limit(1).pretty()" | \
   mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet | \
   grep module_id | cut -d':' -f2`

   ALERT_COUNT=`echo -e "$alert_info" | cut -d":" -f2`

   echo -e "$ALERT_NAME ::\c"
   echo -e "$ALERT_MODULEID ::\c"
   option_selected "$ALERT_COUNT\n" "3"
  done

else
  echo -e "UNSUPPORTED VERSION!"
fi
  #statements
  read -p "Press [Enter] to continue..."

}

#######################################
# Prints alerts date range(interactive input)
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

Count_Alerts_Daterange() {

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 || $ESA_MAJOR_SERVER_VER == 11 ]]; then

  echo -e "To return to the menu press enter until the end and answer N"
  echo -e "************************************************************"
  echo -e "From date YYYY-MM-DD (Default:$YESTERDAY). Please note this is the Starting date of your Range."

  read -e from_date
  from_date=${from_date:=$YESTERDAY}
  check_date $from_date
  echo -e "FROM_DATE:$from_date"
  until [ $? -eq 0 ]
  do
        read -ep "PLEASE INTRODUCE A CORRECT DATE:" from_date
        check_date $from_date
  done

  echo -e "From hour HH:MM:SS (Default:00:00:00)"
  read -e from_hour
  from_hour=${from_hour:=$DEFAULT_FROM_HOUR}
  echo -e "FROM_HOUR:"$from_hour ## COMMENT
  check_hour $from_hour
  until [ $? -eq 0 ]
  do
    read -ep "PLEASE INTRODUCE A CORRECT HOUR:" from_hour
    check_hour $from_hour
  done

  echo -e "To date YYYY-MM-DD (Default:$TODAY). Please note this is the Ending date in your Range."
  read -e to_date
  to_date=${to_date:=$TODAY}

  check_date $to_date
  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT DATE:" to_date
          check_date $to_date
  done


  echo -e "To hour HH:MM:SS (Default:23:59:00)"
  read -e to_hour

  to_hour=${to_hour:=$DEFAULT_TO_HOUR}

  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT HOUR:" to_hour
          check_date $to_hour
  done

  echo -e "Are you sure to query the alert count\nFROM: $from_date - $from_hour \nTO: $to_date - $to_hour \n[y/N]"
  read -e USER_RESPONSE
  USER_RESPONSE=${USER_RESPONSE:="N"}
  case $USER_RESPONSE in
  [yY][eE][sS]|[yY])

    if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
      QUERY_ESA_RANGE=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --quiet --eval 'db.getSiblingDB('"'$ESA_DATABASE'"').alert.aggregate( \
      [{$match :  {receivedTime : {$gt : ISODate('"'${from_date}T${from_hour}Z'"'),$lte : ISODate('"'${to_date}T${to_hour}Z'"')}}}, \
      {$group: { _id : "$originalHeaders.name", count : {$sum : 1}}}])' | egrep "id|count" | tr -d '\t' | cut -d '"' -f1,4,7 | sort -k 3` 
      echo -e "Alert Name : Number of Occurences"
      echo -e $QUERY_ESA_RANGE | sed 's/} {/}\n{/g' | tr -d '{' | tr -d '}'
    else
      QUERY_ESA_RANGE="db.alert.aggregate([{\$match : \
      { time : { \$gt : ISODate(\"${from_date}T${from_hour}Z\"),\
      \$lte : ISODate(\"${to_date}T${to_hour}Z\")}}},\
      {\$group: { _id: \"\$module_name\", \
      count: { \$sum: 1 }}},{ \$sort: { count: 1 } }]);"
      echo -e "$QUERY_ESA_RANGE\n" | tr -d ' '
      echo $QUERY_ESA_RANGE | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet | grep "id" -A1    
    fi
    ;;
      *)
                ;;
  esac

elif [[ $ESA_SERVER_VER == 3 ]]; then
    echo -e "SQL PARAMETERS HERE"
else
    echo -e "UNSUPPORTED VERSION!"
fi
read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Delete alerts by Rule
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################
Delete_Alerts_By_Rule(){

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4  || $ESA_MAJOR_SERVER_VER == 11 ]]; then

  echo -e "Do you want to count the alerts first? This may take a long time if your collection is huge. [Y/n]"
  read -e USER_RESPONSE
  case $USER_RESPONSE in 
    [yY][eE][sS]|[yY])
      Count_All_Alerts
      ;;
      *)
      ;;
  esac
  #11.0 Deletion
  if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
    echo -e "Please provide the rule you want to delete. It must be formatted with quotation marks"
    echo -e "EXAMPLES: "'"'"Rule 1"'"'" or "'"'"Multiple Login Attempts"'"'""
    read -e USER_RESPONSE
    USER_RESPONSE=`echo $USER_RESPONSE | tr -d '"'`
    if [[ ! -z $USER_RESPONSE ]]; then
      echo -e "Are you sure you want to delete Rule:( $USER_RESPONSE ) [y/N]"
      read -e USER_COMPLIANCE
      case $USER_COMPLIANCE in 
      [yY][eE][sS]|[yY])
        #Run the delete process
        ESA_RULE_DELETE=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --eval 'db.getSiblingDB("'"$ESA_DATABASE"'").alert.deleteMany( \
          {"'"originalHeaders.name"'": "'$USER_RESPONSE'"})'`
        echo "Command executed."
        echo "Reindexing to show correct size...Please wait..."
        ReindexAlertDatabase
        ;;
        *)
        ;;
      esac
    fi
  else
    #10.6 Deletions
    TOTAL_RULES=`echo 'db.alert.aggregate({$group : {_id : "$module_name"}
     },{$group: {_id:1, count: {$sum : 1 }}})' | \
     mongo esa -u $ESA_USER -p $ESA_PASSWORD | \
     grep "result" | cut -d' ' -f11`

    echo 'db.alert.aggregate([{ $group: { _id: "$module_name", count: { $sum: 1 }}},
    { $sort: { count: 1 } }])' |\
     mongo esa -p $ESA_PASSWORD -u $ESA_USER |\
     grep "id" -A1 |  sed 's/_id/Rule/g'

    RULES_LIST=`echo 'db.alert.aggregate([{ $group: { _id: "$module_name",
    count: { $sum: 1 }}}, { $sort: { count: 1 } }])' | \
    mongo esa -p $ESA_PASSWORD -u $ESA_USER | \
    grep "_id" | cut -d':' -f2 | tr -d '",'`

    echo -e "Please provide the rule you want to delete. It must be formatted with quotation marks"
    echo -e "EXAMPLES: "'"'"Rule 1"'"'" or "'"'"Multiple Login Attempts"'"'""
    read -e USER_RESPONSE
    if [ ! -z $USER_RESPONSE ]; then
      echo -e "Are you sure to delete RULE:($USER_RESPONSE) [y/N]"
      read -e USER_COMPLIANCE
      #Begin Rule Deletion
      case $USER_COMPLIANCE in
        [yY][eE][sS]|[yY])
          stop_services
          DELETE_MONGO="db.alert.remove({ module_name:${USER_RESPONSE}})"
          echo -e "\nCommand executed in mongodb $DELETE_MONGO \n"
          echo -e "$DELETE_MONGO" | \
          mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet
          ReindexAlertDatabase
          start_services
        ;;
        *)
        ;;
        esac
    fi
  fi
else
    echo -e "UNSUPPORTED VERSION!"
fi
read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Delete date range alerts
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
#          $TODAY
#          $YESTERDAY
# Arguments: NONE
# Returns: NONE
#######################################

Delete_Alerts_DateAndRule(){

echo -e "Do you want to count the alerts? Y/N (Recommended N if the database is huge)"
read -e USER_COMPLIANCE
case $USER_COMPLIANCE in
  [yY][eE][sS]|[yY])
    Count_All_Alerts
  ;;
  [nN])
    echo -e "Aborting Count..."
  ;;
  *)
    echo -e "Aborting Count..."
  ;;
esac
echo -e "\nIntroduce the name of the rule to delete. Example:"
echo -e "Please provide the rule you want to delete. It must be formatted with quotation marks"
echo -e "EXAMPLES: "'"'"Rule 1"'"'" or "'"'"Multiple Login Attempts"'"'""
echo -e "If you wish to delete ALL rules, please type ALLRULES . Do NOT include quotation marks in this case."
read -e rule_delete

# Checking before the query(below) if ALLRULES IS SET
echo -e "TODAY is: $TODAY"
echo -e "From date YYYY-MM-DD (Default:$YESTERDAY). Please note this is the Starting date of your Range."
read -e from_date
from_date=${from_date:=$YESTERDAY}
check_date $from_date
until [ $? -eq 0 ]
do
  read -ep "PLEASE INTRODUCE A CORRECT DATE:" from_date
  check_date $from_date
done

echo -e "From hour HH:MM:SS (Default:00:00:00)"
read -e from_hour
from_hour=${from_hour:=$DEFAULT_FROM_HOUR}

check_hour $from_hour
until [ $? -eq 0 ]
do
  read -ep "PLEASE INTRODUCE A CORRECT HOUR:" from_hour
  check_hour $from_hour
done

echo -e "To date YYYY-MM-DD (Default:$TODAY). Please note this is the Ending date of your Range."
read -e to_date
to_date=${to_date:=$TODAY}

check_date $to_date
until [ $? -eq 0 ]
do
  read -ep "PLEASE INTRODUCE A CORRECT DATE:" to_date
  check_date $to_date
done

echo -e "To hour HH:MM:SS (Default:23:59:00)"
read -e to_hour
to_hour=${to_hour:=$DEFAULT_TO_HOUR}

until [ $? -eq 0 ]
do
  read -ep "PLEASE INTRODUCE A CORRECT HOUR:" to_hour
  check_date $to_hour
done
echo -e "***********************************************"

if [[ $rule_delete == "ALLRULES" ]]; then
  echo -e "ARE YOU SURE TO DELETE ALL ALERTS?"
else
  echo -e "Are you sure to delete the alerts of the\nRULE: $rule_delete"
fi
echo -e "FROM: $from_date - $from_hour \nTO: $to_date - $to_hour \n"

echo -e "\nConfirm? [Y/N]"
read -e USER_COMPLIANCE
USER_COMPLIANCE=${USER_COMPLIANCE:="N"}
case $USER_COMPLIANCE in
  [yY][eE][sS]|[yY])
  #Stop Services, delete entries, restart service
    echo -e "Stopping Services...."
    stop_services
    if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
      rule_delete=`echo $rule_delete | tr -d '"'`
      if [[ $rule_delete == "ALLRULES" ]]; then
        echo -e "Deleting ALL Rules. This may take some time..."
        QUERY_ESA_RANGE=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --eval 'db.getSiblingDB("'"$ESA_DATABASE"'").alert.deleteMany({ $and:
        [{ receivedTime:{$gte: ISODate("'"${from_date}T${from_hour}Z"'")}},
        { receivedTime: {$lte: ISODate("'"${to_date}T${to_hour}Z"'")}}]})'`
        echo -e $QUERY_ESA_RANGE
      else
        QUERY_ESA_RANGE=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --eval 'db.getSiblingDB("'"$ESA_DATABASE"'").alert.deleteMany({ $and: 
        [{ receivedTime:{$gte: ISODate("'"${from_date}T${from_hour}Z"'")}},{ receivedTime: {$lte: ISODate("'"${to_date}T${to_hour}Z"'")}}, 
        {"'"originalHeaders.name"'": "'"$rule_delete"'"}]})'`
        echo -e $QUERY_ESA_RANGE 
      fi

    #10.6 deletions
    else
      if [[ $rule_delete == "ALLRULES" ]]; then
        QUERY_ESA_RANGE="db.alert.remove({ \$and:
        [{ time:{\$gte: ISODate(\"${from_date}T${from_hour}Z\")}},
        { time: {\$lte: ISODate(\"${to_date}T${to_hour}Z\")}}]})"
      else
        QUERY_ESA_RANGE="db.alert.remove({ \$and:
        [{ time:{\$gte: ISODate(\"${from_date}T${from_hour}Z\")}},
        { time: {\$lte: ISODate(\"${to_date}T${to_hour}Z\")}},
        {module_name: $rule_delete}]})"
      fi
        echo "$QUERY_ESA_RANGE" | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet
        ReindexAlertDatabase
    fi
    echo -e "Starting Services..."
    start_services
    ;;
  *)
    ;;
esac

read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Delete IM incidents & alerts
# Globals: $ESA_SERVER_VER
#          $IM_USER
#          $IM_PASSWORD
#          $TODAY
#          $YESTERDAY
# Arguments: NONE
# Returns: NONE
#######################################

Delete_Alerts_IM(){

if [[ $ESA_MAJOR_SERVER_VER == 10  &&  $ESA_SERVER_VER == 6 ]]; then

  echo -e "Do you want to delete all alerts and incidents from IM[y/N]"
  read -e option6_input
  option6_input=${option6_input:="N"}
  case $option6_input in
    [yY][eE][sS]|[yY])
    IM_INCIDENT_REMOVE="db.incident.remove()"
    IM_ALERT_REMOVE="db.alert.remove()"
    echo -e "Command executed in Mongodb: $IM_INCIDENT_REMOVE"
    echo 'db.incident.remove()' | mongo im -u $IM_USER -p $IM_PASSWORD
    echo -e "Command executed in Mongodb: $IM_ALERT_REMOVE"
    echo 'db.alert.remove()' | mongo im -u $IM_USER -p $IM_PASSWORD
    ;;
      *)
    ;;

  esac
fi
read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Parses running rules in ESA
# Globals: $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

Parse_Running_Rules(){
if [[  $ESA_MAJOR_SERVER_VER == 10 || $ESA_MAJOR_SERVER_VER == 11 ]]; then
  EPL_ESA_FILE='/opt/rsa/esa/conf/eplModuleManager.json'
    if [[ -e $EPL_ESA_FILE ]]; then
      sed -e 's/\\\\n/\n/g' -e 's/\\\\r//g' -e 's/\\\\t//g' -e 's/\\\"/\"/g' \
      $EPL_ESA_FILE 2>&1 | tee /root/parsed_rules.txt
    else
      echo -e "$EPL_ESA_FILE not found"
    fi
  option_selected "\n\n\n\nCreated /root/parsed_rules.txt" "3"
  echo -e "\n*********************************************************\n"
  read -p "Press [Enter] to return to the Main Menu"
fi
}

#######################################
# Matches moduleid with rules
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

List_Module_ID(){
if [[ $ESA_MAJOR_SERVER_VER == 10  &&  $ESA_SERVER_VER == 6 ]]; then
  for moduleid in $(echo 'db.alert.aggregate([{$group:{ _id :"$module_id"}}])'\
   | mongo esa -u $ESA_USER -p $ESA_PASSWORD | grep id |\
    cut -d':' -f2);do echo "db.alert.find({ module_id:"$moduleid"},
    {module_name:1,module_id:1,_id:0}).limit(1)" |\
    mongo esa -u $ESA_USER -p $ESA_PASSWORD |\
    grep module_id; done
fi
read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Delete all alerts
# Globals: $ESA_MAJOR_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

Delete_Alerts_All(){
  RANDOM_NUMBER=`shuf -i100000-1000000 -n1`
  echo -e "SECURITY NUMBER:$RANDOM_NUMBER"
  echo -e "Introduce the number above to DELETE ALL ALERTS:"
  read -e option10_input
  if [ "$option10_input" == "$RANDOM_NUMBER" ]; then
    stop_services
    if [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
      DELETEALERTQUERY=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --eval 'db.getSiblingDB("'"$ESA_DATABASE"'").alert.drop()'`
    elif [[ $ESA_MAJOR_SERVER_VER == 10 ]]; then
      echo "db.alert.drop()" | mongo esa -u $ESA_USER -p $ESA_PASSWORD
    else
      echo "UNSUPPORTED VERSION! ABORTING!"
    fi
    start_services
  fi
  read -p "Press [Enter] to return to the Main Menu"
  }

#######################################
# Enables Index optimization
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

Index_Optimize(){
  echo -e "This might be necessary if you see a discrepancy between your Alert database and the actual file sizes."
  echo -e "Do you want to optimize the alert collection index? [y/N]"
  read -e optimize_confirmation
  optimize_confirmation=${optimize_confirmation:="N"}
  case $optimize_confirmation in
    [yY][eE][sS]|[yY])
      if [[ $ESA_MAJOR_SERVER_VER == 10  &&  $ESA_SERVER_VER == 6 ]]; then
        INDEX_QUERY='db.alert.ensureIndex({time:1}, {background:true})'
        echo "Starting 10.6 Mongo Index Optimization..."
        echo $INDEX_QUERY | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet
        echo "Finished 10.6 Mongo Index Optimization..."
      elif [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
        echo "Starting Mongo Index Optimization..."
        INDEX_QUERY=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --eval 'db.getSiblingDB("'"$ESA_DATABASE"'").alert.ensureIndex({time:1}, {background:true})'`
        echo "Finished Mongo Index Optimization..."
      fi
      ;;
    *)
      ;;
  esac
read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Enables Index optimization
# Globals: $ESA_MAJOR_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################


ReindexAlertDatabase(){
#10.X Index
if [[ $ESA_MAJOR_SERVER_VER == 10 ]]; then
  REINDEX_MONGO="db.alert.reIndex()"
  echo $REINDEX_MONGO | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet 
elif [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
  REINDEX_MONGO=`mongo admin -u $ESA_USER -p $ESA_PASSWORD --eval 'db.getSiblingDB("'"$ESA_DATABASE"'").alert.reIndex()'`
fi
}

#######################
## MAIN()
#######################

clear
minimal_check
show_menu_precheck $ESA_SERVER_VER
precheck_esatool $ESA_SERVER_VER
clear
show_menu $ESA_SERVER_VER

if [[ $ESA_SERVER_VER == 6 ]]; then
  while [ opt != '' ]
    do
      if [[ $opt = "" ]]; then
        exit;
      else
        case $opt in
          0) clear;
          option_selected "Option 0 Selected: System Activity Report" "4";
          System_Activity_Report
          show_menu $ESA_SERVER_VER;
          ;;
          1) clear;
          option_selected "Option 1 Selected: Count All Alerts" "4";
          Count_All_Alerts
          show_menu $ESA_SERVER_VER;
          ;;

          2) clear;
          option_selected "Option 2 Selected: Count Alerts by Date Range" "4";
          Count_Alerts_Daterange
          show_menu $ESA_SERVER_VER;
          ;;

          3) clear;
          option_selected "Option 3 Selected: Delete Alerts by Rule" "4";
          Delete_Alerts_By_Rule
          show_menu $ESA_SERVER_VER;
          ;;

          4) clear;
          option_selected "Option 4 Selected: Delete Alerts by Date Range and Rule" "4";
          Delete_Alerts_DateAndRule
          show_menu $ESA_SERVER_VER;
          ;;
          5) clear;
          option_selected "Option 5 Selected: Delete Alerts and Incidents in IM" "4";
          Delete_Alerts_IM
          show_menu $ESA_SERVER_VER;
          ;;
          6) clear;
          option_selected "Option 6 Selected: Parse Running Rules in ESA" "4";
          Parse_Running_Rules
          show_menu $ESA_SERVER_VER;
          ;;

          #7) clear;
          #option_selected "Option 7 Selected: List Module IDs" "4";
          #List_Module_ID
          #show_menu $ESA_SERVER_VER;
          #;;
          7) clear;
          option_selected "Option 7 Selected: Delete ALL Alerts" "4";
          Delete_Alerts_All
          show_menu $ESA_SERVER_VER;
          ;;
          8) clear;
          option_selected "Option 8 Selected: Index Optimization" "4";
          Index_Optimize
          show_menu $ESA_SERVER_VER;
          ;;
          x)exit;
          ;;

          \n)exit;
          ;;

          *)clear;
          option_selected "Select an option from the menu";
          show_menu $ESA_SERVER_VER;
          ;;
        esac
      fi
  done
elif [[ $ESA_MAJOR_SERVER_VER == 11 ]]; then
  while [ opt != '' ]
    do
      if [[ $opt = "" ]]; then
        exit;
      else
        case $opt in
          0) clear;
          option_selected "Option 0 Selected: System Activity Report" "4";
          System_Activity_Report
          show_menu $ESA_SERVER_VER;
          ;;
          1) clear;
          option_selected "Option 1 Selected: Count All Alerts" "4";
          Count_All_Alerts
          show_menu $ESA_SERVER_VER;
          ;;

          2) clear;
          option_selected "Option 2 Selected: Count Alerts by Date Range" "4";
          Count_Alerts_Daterange
          show_menu $ESA_SERVER_VER;
          ;;

          3) clear;
          option_selected "Option 3 Selected: Count Alerts by Rule" "4";
          Delete_Alerts_By_Rule
          show_menu $ESA_SERVER_VER;
          ;;

          4) clear;
          option_selected "Option 4 Selected: Delete Alerts by Date Range and Rule" "4";
          Delete_Alerts_DateAndRule
          show_menu $ESA_SERVER_VER;
          ;;
          5) clear;
          option_selected "Option 5 Selected: Parse Running Rules in ESA" "4";
          Parse_Running_Rules
          show_menu $ESA_SERVER_VER;
          ;;
          #6) clear;
          #option_selected "Option 6 Selected: List Module IDs" "4";
          #List_Module_ID
          #show_menu $ESA_SERVER_VER;
          #;;
          6) clear;
          option_selected "Option 6 Selected: Delete ALL Alerts" "4";
          Delete_Alerts_All
          show_menu $ESA_SERVER_VER;
          ;;
          7) clear;
          option_selected "Option 7 Selected: Index Optimization" "4";
          Index_Optimize
          show_menu $ESA_SERVER_VER;
          ;;
          x)exit;
          ;;

          \n)exit;
          ;;

          *)clear;
          option_selected "Select an option from the menu";
          show_menu $ESA_SERVER_VER;
          ;;
        esac
      fi
  done
else
  echo -e "UNSUPPORTED VERSION! Aborting..."
  exit 0
fi

