#!/bin/bash
#
# SCRIPT: esatool
# AUTHOR: Pablo Trigo
# DATE: 17/06/2016
# REV: 2.1 rev2
#
# PLATFORM: Linux Centos (Security Analytics 10.3, 10.4 ,10.5, 10.6) ESA APPLIANCE
#
# PURPOSE: Troubleshooting tool for ESA
# LICENSE: GNU Public License v2 (http://gnu.org/licenses/)
# Copyright (C) 2016 Pablo Trigo
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
###################################################################################
#
#
# Changelog 2.1 rev1
# - Fixed code issue in license option
# - Modified option 5 to skip the count (heavy loaded mongodbs)
# - Added 10.6 support
# Changelog 2.1 rev2
# - Fixed code issue in esaclient
# - Added option to skip the precheck
# - Displayed the current version of ESA in the menu
# - Added nextgen section in precheck section
#
# GLOBAL VARIABLES

ESA_SERVER_VER=`rpm -qa | grep rsa-esa-server | cut -d'-' -f4 | cut -d'.' -f2`
ESA_CLIENT_VER=`rpm -qa | grep rsa-esa-client | cut -d'-' -f4 | cut -d'.' -f2`
ESA_SERVER_EXACTVER=`rpm -qi rsa-esa-server | grep Version | awk '{print $3}'`

echo -e "ESA_SERVER: $ESA_SERVER_VER"
TODAY=`date +%Y-%m-%d`
YESTERDAY=`date -d "-1 day" +"%Y-%m-%d"`
DEFAULT_FROM_HOUR="00:00:00"
DEFAULT_TO_HOUR="23:59:59"

# Default ESA user and password
ESA_USER="esa"
ESA_PASSWORD="esa"
MONGO_PORT="27017"

# Default IM user and Password
IM_USER="im"
IM_PASSWORD="im"

SAVEIFS=$IFS
# Change default limiter for
IFS=$(echo -en "\n\b")

## FUNCTIONS
#
# Version is 10.X
minimal_check(){

  if [[ $ESA_SERVER_VER == "3" ]] ||
     [[ $ESA_SERVER_VER == "4" ]] ||
     [[ $ESA_SERVER_VER == "5" ]] ||
     [[ $ESA_SERVER_VER == "6" ]] ; then
    echo -e "ESA VERSION DETECTED: $ESA_SERVER_EXACTVER"

  else
    echo -e "ESA VERSION NOT DETECTED OR SUPPORTED $ESA_SERVER_EXACTVER..."
    exit 1
  fi
}

#######################################
# Prints a message in color
# Globals: NONE
# Arguments:
#   $1 message
#   $2 color (0 - 31)
# Returns: NONE
#######################################

option_selected() {

    COLORS=(
    '\e[0;30m' # Black - Regular - 0
    '\e[0;31m' # Red - 1
    '\e[0;32m' # Green - 2
    '\e[0;33m' # Yellow - 3
    '\e[0;34m' # Blue - 4
    '\e[0;35m' # Purple - 5
    '\e[0;36m' # Cyan - 6
    '\e[0;37m' # White - 7
    '\e[1;30m' # Black - Bold - 8
    '\e[1;31m' # Red - 9
    '\e[1;32m' # Green - 10
    '\e[1;33m' # Yellow - 11
    '\e[1;34m' # Blue - 12
    '\e[1;35m' # Purple - 13
    '\e[1;36m' # Cyan - 14
    '\e[1;37m' # White - 15
    '\e[4;30m' # Black - Underline - 16
    '\e[4;31m' # Red - 17
    '\e[4;32m' # Green - 18
    '\e[4;33m' # Yellow - 19
    '\e[4;34m' # Blue - 20
    '\e[4;35m' # Purple - 21
    '\e[4;36m' # Cyan - 22
    '\e[4;37m' # White - 23
    '\e[40m'   # Black - Background - 24
    '\e[41m'   # Red - 25
    '\e[42m'   # Green - 26
    '\e[43m'   # Yellow - 27
    '\e[44m'   # Blue - 28
    '\e[45m'   # Purple - 29
    '\e[46m'   # Cyan - 30
    '\e[47m'   # White - 31
 )
    RESET='\033[00;00m' # normal white
    MESSAGE=$1
    echo -e "${COLORS[$2]}${MESSAGE}${RESET}"
}

print_ok(){
  echo "[`option_selected "OK" "2"`]"
}

print_nok(){
  echo "[`option_selected "NOK" "1"`]"
}


#######################################
# Check the IP format
# Globals: NONE
# Arguments: $1 IP to check
# Returns: 0 Format OK
#          1 Format NOK
#######################################

check_ip() {
   if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
   then
       return 0
   else
       return 1
   fi
}

#######################################
# Check index optimization in Mongodb
# Globals: $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

check_index(){

INDEX_NUMBER=`echo 'db.alert.getIndexes()' | mongo esa -u $ESA_USER \
-p $ESA_PASSWORD | grep -v "_id" | grep name | wc -l`

if [[ $INDEX_NUMBER == "0" ]]; then
        option_selected "Index optimization NOT FOUND please use option 13" "1"
else
        option_selected "OK" "2"
fi
}

#######################################
# Check if the PORT is reachable in the provided IP
# Globals: NONE
# Arguments: $1 PORT to check
#            $2 IP to check
# Returns: 0 if the port is reachable
#          1 if the port is unreachable
#######################################

port_chkcon(){

echo "Checking Port $1 -> $2"
timeout 5 bash -c "cat < /dev/null > /dev/tcp/$2/$1"

if [[ $? -eq 0 ]]; then
 option_selected "connection OK port $1" "2"
 return 0
else
 option_selected "connection NOK port $1" "1"
 return 1
fi

}

#######################################
# Check database size
# Globals: $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

database_size(){

DATABASE_SIZE=`echo 'show collections' | mongo esa -u $ESA_USER \
-p $ESA_PASSWORD | grep alert`

if [[ -z "$DATABASE_SIZE" ]]; then
        option_selected "No alert collection found" "1"
else
        echo -e $DATABASE_SIZE
fi

}

#######################################
# It shows the first alert in Mongodb
# Globals: $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

first_alert(){

FIRST_ALERT=`echo 'db.alert.find().sort({"time": 1}).limit(1).pretty()' | \
mongo esa -u $ESA_USER -p $ESA_PASSWORD | \
egrep '"time"|"module_name"'`

if [ -z "$FIRST_ALERT" ];then
        option_selected "No alert found" "1"
else
        echo -e "$FIRST_ALERT" | grep -vi "Long"
fi
}

#######################################
# It shows the last alert in Mongodb
# Globals: $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################


last_alert(){

LAST_ALERT=`echo 'db.alert.find().sort({"time": -1}).limit(1).pretty()' | \
mongo esa -u $ESA_USER -p $ESA_PASSWORD |\
egrep '"time"|"module_name"'`

if [[ -z "$LAST_ALERT" ]]; then
        option_selected "No alert found" "1"
else
        echo -e "$LAST_ALERT" | grep -vi "Long"
fi


}

#######################################
# Mongodb path check
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_mongodbpath(){

CHECK_MONGODBPATH=`egrep -i "^dbpath" /etc/tokumx.conf`

if [[ -z "$CHECK_MONGODBPATH" ]]; then
        option_selected "No mongodb path found in /etc/tokumx.conf" "1"
else
        echo -e $CHECK_MONGODBPATH
fi
}

#######################################
# Checks date and format YYYY-MM-DD
# Globals: NONE
# Arguments: $1 Date to check
# Returns: 0 if the date is OK
#          1 if the date is NOK
#######################################

check_date(){
 date_check=`date "+%Y-%m-%d" -d "$1"  > /dev/null 2>&1 ;echo $?`
 date_check2=`echo $1 | awk -F '-'  '{ print ($1 > 1900 && $1 < 2100 && $2 <= 12 && $2!="" && $3!="" && $3 <= 31) ? "0" : "1"}'`
 if [[ $date_check == "0" && $date_check2 == "0" ]];then
        return 0
 else
        return 1
 fi
}

#######################################
# Checks hour and format HH:MM:SS
# Globals: NONE
# Arguments: $1 Hour to check
# Returns: 0 if the hour is OK
#          1 if the hour is NOK
#######################################

check_hour(){

hour_check=`date "+%H:%M:%S" -d "$1" > /dev/null 2>&1; echo $?`
hour_check2=`echo $1 | awk -F ':' '{ print ( $1 <= 23 && $2 <= 59 && $2!="" && $3!="" && $3 <= 59) ? "0" : "1"}'`

if [[ $hour_check == "0" && $hour_check2 == "0" ]]; then
        return 0
else
        return 1
fi
}

#######################################
# Check partition size
# Globals: NONE
# Arguments: $1 limit
# Returns: NONE
#######################################

check_partitions(){

for partition in $(df -Ph | grep -v Filesystem)
do
  PART=`echo $partition | awk '{print $1," ",$6}'`
  USAGE=`echo $partition | awk '{print $5}'| tr -d '%'`
  if [[ "$USAGE" -gt "$1" ]]; then
    option_selected "*********************************************" "1"
    option_selected "           PARTITION OVER $1 %              " "2"
    option_selected "*********************************************" "1"
   echo "$PART - usage $USAGE% `print_nok`"
  fi
done

}
#######################################
# Check service status
# Globals: NONE
# Arguments: $1 service name to check
# Returns: 0 if running 1 if stopped
#######################################

check_service(){

CHECK_SERVICE_VERBOSE=$2
SERVICE_STATUS=`service $1 status | grep -i "running"`
if [[ -z $SERVICE_STATUS ]]; then
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_nok`"
  fi
  return 1
else
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_ok`"
  fi
  return 0
fi

}

#######################################
# Check init service status
# Globals: NONE
# Arguments: $1 service name to check
# Returns: 0 if running 1 if stopped
#######################################

check_init_service(){

CHECK_SERVICE_VERBOSE=$2
SERVICE_STATUS=`status $1 | grep -i "running"`
if [[ -z $SERVICE_STATUS ]]; then
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_nok`"
  fi
  return 1
else
  if [[ $CHECK_SERVICE_VERBOSE == 1 ]]; then
    echo -e " $1 `print_ok`"
  fi
  return 0
fi

}

#######################################
# Stops puppet and esa services
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

stop_services(){
# Check if the service is already stopped
check_service puppet
if [[ $? -eq 0 ]]; then
  service puppet stop
fi
check_service rsa-esa
if [[ $? -eq 0 ]]; then
  service rsa-esa stop
fi

}

#######################################
# Starts puppet and esa services
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

start_services(){

check_service puppet
if [[ $? -eq 1 ]]; then
  service puppet start
fi
check_service rsa-esa
if [[ $? -eq 1 ]]; then
  service rsa-esa start
fi

}

#######################################
# Stops Incident Manager service
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

stop_im(){

  check_service puppet
  if [[ $? -eq 0 ]]; then
    service puppet stop
  fi
    check_service puppet
  if [[ $? -eq 0 ]]; then
      service rsa-im stop
  fi

}

#######################################
# Starts Incident Manager service
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

start_im(){

  check_service puppet
  if [[ $? -eq 1 ]]; then
    service puppet start
  fi
    check_service puppet
  if [[ $? -eq 1 ]]; then
      service rsa-im start
  fi
}

#######################################
# Check ntp
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################


check_ntp(){

  option_selected "***************************************************\n" "1"
  option_selected "    NTP CONFIG  *`date`*                     " "2"
  option_selected "***************************************************\n" "1"
  ntpq -p -n
  option_selected "Configured server/s in /etc/ntp.conf" "3"
  grep -i "server" /etc/ntp.conf | egrep -v "^#"
}

#######################################
# Check core services
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_services(){

  option_selected "                   SERVICES                  " "2"
  option_selected "***************************************************" "1"
  check_service rsa-esa 1 | tr -d '\n'
  check_service rabbitmq-server 1 | tr -d '\n'
  check_service sshd 1
  check_service puppet 1 | tr -d '\n'
  check_service ntpd 1 | tr -d '\n'
  check_service tokumx 1 | tr -d '\n'
  check_service collectd 1 | tr -d '\n'
  check_service mcollective 1

}

#######################################
# Check IM,ESA collections auth
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $IM_USER
#          $IM_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################
check_credentials(){

  ESA_TEST_CONN=`echo "" | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet| wc -c`
  IM_TEST_CONN=`echo "" | mongo im -u $IM_USER -p $IM_PASSWORD --quiet| wc -c`

  if [[ "$ESA_TEST_CONN" != "0" ]]; then
    echo -e "Connection failed to tokumx in ESA, verify tokumx status and credentials"
    echo -e "Credentials can be modified in /usr/bin/esatool"
    echo -e 'ESA_USER="youruserifdifferent" and ESA_PASSWORD="yourpassword"'
    exit 0
  fi

  if [[ "$IM_TEST_CONN" != "0" ]]; then
    echo -e "Connection failed to tokumx in ESA, verify tokumx status and credentials"
    echo -e "Credentials can be modified in /usr/bin/esatool"
    echo -e 'IM_USER="youruserifdifferent" and IM_PASSWORD="yourpassword"'
    exit 0
  fi
}

#######################################
# Check current and available kernels
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

check_kernels(){

  AVAILABLE_KERNELS=`find /boot/ -name initramfs* | sort -n`
  RUNNING_KERNEL=`uname -a`

  option_selected "\n***************************************************" "1"
  option_selected "                   KERNEL                    " "2"
  option_selected "***************************************************" "1"
  option_selected "Running:" "3"
  echo "$RUNNING_KERNEL"
  option_selected "Available:" "3"
  echo "$AVAILABLE_KERNELS"

}

check_memory(){

  option_selected "\n***************************************************" "1"
  option_selected "                   MEMORY(MB)                " "2"
  option_selected "***************************************************" "1"
  free -mt

}

check_enablement(){

  option_selected "\n***************************************************" "1"
  option_selected "                   ENABLEMENT                " "2"
  option_selected "***************************************************" "1"
  option_selected "Checking PUPPET port in SA SERVER" "3"
  port_chkcon "8140" $SA_IP
  option_selected "Checking MCOLLECTIVE port in ESA" "3"
  port_chkcon "61614" 127.0.0.1
  option_selected "Checking HTTP port in SA SERVER" "3"
  port_chkcon "80" $SA_IP

  echo -e "Advice troubleshooting (if necessary):"
  echo -e "Check if port 61614 (TCP) is reachable from SA SERVER"
  echo -e "In SA SERVER: curl -v ESAIP:61614"
  echo -e "Check iptables -L -n in ESA"
}

#######################################
# Enforce to true Eventtime
# Globals: $ESA_CLIENT_VER
# Arguments: NONE
# Returns: NONE
#######################################
# exit func for no esaclient and for 5 and 6 change path esa-client
check_event_time(){
  option_selected "\n***************************************************" "1"
  option_selected "       EVENT_TIME VAR(empty if esa-client timeout)  " "2"
  option_selected "***************************************************" "1"

  if [[ -z "$ESA_CLIENT_VER" ]]; then
    option_selected "ESA CLIENT NOT INSTALLED" "3"
    option_selected "Check in ESA > EXPLORE VIEW > CEP > ENGINE > CONFIGURATION" "3"
    option_selected "(>10.4) ESA > EXPLORE VIEW > CEP > ENGINE > CEPENGINE" "3"
    option_selected "UsingEventTime must be TRUE" "3"
  else
      if [[ "$ESA_SERVER_VER" -eq 5 || "$ESA_SERVER_VER" -eq 6  ]]; then
    #statements
        echo -e "cd /CEP/Engine/cepEngine" > /tmp/esa_patch.esatool
        echo -e "set UsingEventTime --value true" >> /tmp/esa_patch.esatool
      elif [[ "$ESA_SERVER_VER" -eq 4 ]]; then
        #statements
        echo -e "cd /CEP/Engine/configuration" > /tmp/esa_patch.esatool
        echo -e "set UsingEventTime --value true" >> /tmp/esa_patch.esatool

      else
        echo -e "ESA VERSION UNKNOWN!!!"
        return 1
      fi
      timeout 15 /opt/rsa/esa/client/bin/esa-client --cmdfile /tmp/esa_patch.esatool
      sleep 1
      rm -f /tmp/esa_patch.esatool
  fi

}

#######################################
# Nextgen esa check
# Globals: $ESA_CLIENT_VER
# Arguments: NONE
# Returns: NONE
#######################################

check_nextgen(){

  option_selected "\n***************************************************" "1"
  option_selected "     NEXTGEN CHECK (empty if esa-client timeout)   " "2"
  option_selected "***************************************************" "1"

if [[ $ESA_CLIENT_VER ]]; then
  echo -e "cd /nextgen" > /tmp/esa_patch.esatool
  echo -e "get ." >> /tmp/esa_patch.esatool
  timeout 5 /opt/rsa/esa/client/bin/esa-client --cmdfile /tmp/esa_patch.esatool
  sleep 1
  rm -f /tmp/esa_patch.esatool
else
  option_selected "ESA CLIENT NOT INSTALLED, ABORTING CHECK" "3"
fi
read -p "Press enter to continue the precheck"
}
#######################################
# Global health check
# Globals: $SA_IP
# Arguments: NONE
# Returns: NONE
#######################################

health_check(){
  option_selected "                 HEALTH CHECK" "3"
  option_selected "***************************************************" "1"

  check_services
  option_selected "***************************************************" "1"
  option_selected "Checking MONGODB Index optimization" "3"
  check_index
  option_selected "Current MONGODB path" "3"
  check_mongodbpath
  option_selected "Alert database size" "3"
  database_size
}

#######################################
# Generates the precheck menu
# Globals: NONE
# Arguments: NONE
# Returns: NONE
#######################################

show_menu_precheck(){
  option_selected "        ___                  __             __  " "4"
  option_selected "       / _ \ ____ ___  ____ / /  ___  ____ / /__" "4"
  option_selected "      / ___// __// -_)/ __// _ \/ -_)/ __//  '_/" "4"
  option_selected "     /_/   /_/   \__/ \__//_//_/\__/ \__//_/\_\ " "3"
  echo -e "\n"
}

#######################################
# Generates the main menu
# Globals: NONE
# Arguments: $1 (ESA SERVER VERSION)
# Returns: NONE
#######################################
show_menu(){
clear
health_check
option_selected "        ____ ____ ___  ______ ____   ____   __ " "4"
option_selected "       / __// __// _ |/_  __// __ \ / __ \ / / " "4"
option_selected "      / _/ _\ \ / __ | / /  / /_/ // /_/ // /__" "4"
option_selected "     /___//___//_/ |_|/_/   \____/ \____//____/" "4"

if [[ $1 -eq 4 ]]; then
  option_selected "            RSA SECURITY (ESA $ESA_SERVER_EXACTVER) v2.1" "3"
  option_selected "*****************************************************" "1"
  echo -e "** 0) System Activity Report"
  echo -e "** 1) Count all alerts sorted by rules "
  echo -e "** 2) Count alerts in date range "
  echo -e "** 3) Delete alerts associated to a rule "
  echo -e "** 4) Delete License"
  echo -e "** 5) Delete date range of alerts associated to a rule or all rules(COUNT optional)"
  echo -e "** 6) Delete IM alerts and incidents (ALL) "
  echo -e "** 7) Parse running rules in ESA "
  echo -e "** 8) List module_id - rule name "
  echo -e "** 9) Show Collections "
  echo -e "** 10) DELETE ALL ALERTS (EXPERIMENTAL)"
  echo -e "** 11) MAINTENANCE MODE (Disable all rules)"
  echo -e "** 12) Index optimization ESA (x5 Speed)"

elif [[ $1 -eq 5 ]]; then
  option_selected "            RSA SECURITY (ESA $ESA_SERVER_EXACTVER) v2.1" "3"
  option_selected "****************************************************" "1"
  echo -e "** 0) System Activity Report"
  echo -e "** 1) Count all alerts sorted by rules "
  echo -e "** 2) Count alerts in date range "
  echo -e "** 3) Delete alerts associated to a rule "
  echo -e "** 4) Delete License"
  echo -e "** 5) Delete date range of alerts associated to a rule or all rules(COUNT optional)"
  echo -e "** 6) Delete IM alerts and incidents (ALL) "
  echo -e "** 7) Parse running rules in ESA "
  echo -e "** 8) List module_id - rule name "
  echo -e "** 9) Show Collections "
  echo -e "** 10) DELETE ALL ALERTS (EXPERIMENTAL)"
  echo -e "** 11) MAINTENANCE MODE (Disable all rules)"
  echo -e "** 12) Index optimization ESA (x5 Speed)"
elif [[ $1 -eq 6 ]]; then
  option_selected "            RSA SECURITY (ESA $ESA_SERVER_EXACTVER) v2.1" "3"
  option_selected "****************************************************" "1"
  echo -e "** 0) System Activity Report"
  echo -e "** 1) Count all alerts sorted by rules "
  echo -e "** 2) Count alerts in date range "
  echo -e "** 3) Delete alerts associated to a rule "
  echo -e "** 4) Delete License"
  echo -e "** 5) Delete date range of alerts associated to a rule or all rules(COUNT optional)"
  echo -e "** 6) Delete IM alerts and incidents (ALL) "
  echo -e "** 7) Parse running rules in ESA "
  echo -e "** 8) List module_id - rule name "
  echo -e "** 9) Show Collections "
  echo -e "** 10) DELETE ALL ALERTS (EXPERIMENTAL)"
  echo -e "** 11) MAINTENANCE MODE (Disable all rules)"
  echo -e "** 12) Index optimization ESA (x5 Speed)"

else
  echo -e "FUTURE VERSION?"
fi
  option_selected "********************************************************" "1"
  echo -e "Please enter a menu option and enter or enter to exit."
  read -e opt
}

#######################################
# Discovers the SA SERVER IP
# Globals: NONE
# Arguments: $1 ($ESA_SERVER_VER)
# Returns: NONE
#######################################

precheck_esatool(){

# LEGACY ONLY DISPLAYING COMMANDS IN VERSION 10.3
echo -e "Do you want to do a precheck in ESA?[Y/n]"
read -e precheck_input1
precheck_input1=${precheck_input1:="Y"}
case $precheck_input1 in
                [yY][eE][sS]|[yY])

  if [[ $1 == "3" ]]; then

    echo -e "Version 10.3 detected skipping precheck"
    echo -e "***************************************\n"
    echo -e "CONNECT TO DATABASE(password esa):\n"
    echo -e "psql -h localhost -U esa\n"
    echo -e "** COUNT ALERTS **\n"
    echo -e "Example:\n"
    echo -e "psql -h localhost -U esa -c \"SELECT module_name, COUNT(*) FROM alert GROUP BY module_name ORDER BY count DESC\"\n"
    echo -e "** DELETE ALERTS FOR A SPECIFIC RULE BETWEEN DATES**\n"
    echo -e "Example:\n"
    echo -e " DELETE FROM alert WHERE module_name='bad rule' AND time > '2015-12-07 15:08:39.999' AND time < '2015-12-07 15:09:42.00';\n"
    echo -e "For more information contact with RSA support\n"
  exit 1

  else

  # Service checks
  check_services
  check_ntp
  check_partitions 80
  check_credentials
  check_kernels
  check_memory

  precheck_test=""
  echo $precheck_test
    # Determine ESA version
      # Versions 10.4, 10.5 use puppetmaster.local as SA SERVER IP
      # SA SERVER IP CHECK START
      SA_IP=`grep "puppetmaster.local" /etc/hosts | awk '{ print $1 }' | sort -u`
      option_selected "\nCHECK SA SERVER IP" "2"
      option_selected "******************" "3"
      echo -e "Checking if SA server ip is correct in /etc/hosts\n"


  check_ip $SA_IP
  if [[ $? -eq 0 ]]; then
        echo "SA SERVER IP ($SA_IP) `print_ok`"
  else
        precheck_test = "N"
        option_selected "SA server is NOK, please check /etc/hosts" "1"
        option_selected "EXAMPLE:" "2"
        option_selected "192.168.1.200 puppetmaster.local" "2"
  fi

  if [[ "$precheck_test" == "N" ]]; then
    sa_ip_check="N"
  else
    read -ep "Is it correct? [Y/n]" sa_ip_check
    sa_ip_check=${sa_ip_check:="Y"}
  fi

  case $sa_ip_check in
    [Nn])
    echo -e "Introduce the SA Server IP:"
    read -e sa_ip_check
    check_ip $sa_ip_check
    until [[ $? -eq 0 ]]
     do
      echo "Introduce the correct SA SERVER ip:"
      read -e sa_ip_check
      check_ip $sa_ip_check
    done
    echo -e "\n$sa_ip_check seems a correct ip `print_ok`"
    SA_IP=$sa_ip_check
    ;;
  esac
  check_event_time
  check_nextgen
  check_enablement

  # SA IP SERVER CHECK END

  # CHECK IF SA SERVER MONGO IS reachable
  option_selected "\nCHECK SA SERVER TOKUMX(MONGODB)" "2"
  option_selected "*******************************" "3"
  port_chkcon 27017 $SA_IP
  if [[ $? -eq 0 ]]; then
   echo -e "\nTOKUMX(MONGODB) $SA_IP:$MONGO_PORT `option_selected "[OK]" "2"`"
  else
    echo -e "\nTOKUMX(MONGODB) $SA_IP:$MONGO_PORT `option_selected "[NOK]" "1"`"
    ESA_IP=`ip addr |  grep "inet " \
    | egrep "eth0|em1" | cut -d'/' -f1 | sed 's/   inet //g'`
    option_selected "Don't panic!, this port is filtered by default,\
  please confirm ESA ip:" "3"
    option_selected "ESA IP detected($ESA_IP)" "2"
    read -ep "Is it correct? [Y/n]" esa_ip_check
    esa_ip_check=${esa_ip_check:="Y"}
    case $esa_ip_check in
    [Nn])
      echo -e "Introduce the ESA Server IP:"
      read -e esa_ip_check
      check_ip $esa_ip_check
      until [[ $? -eq 0 ]]
      do
        echo "Introduce the ESA Server IP:"
        read -e esa_ip_check
        check_ip $esa_ip_check
      done
      echo -e "\n$esa_ip_check seems a correct ip `option_selected "[OK]" "2"`"
      ESA_IP=$esa_ip_check
      ;;
    esac
  echo -e "\nIntroduce the password of SA server to\
   open this port, esatool needs it:"
    precheck_test="N"
  fi

  if [[ $precheck_test == "N" ]]; then

   option_selected "\nExecuting:\nssh $SA_IP -l root iptables -I INPUT 1 -p tcp --dport 27017 -s $ESA_IP -m comment --comment \"ESATOOL\" -j ACCEPT" "2"
    ssh $SA_IP -l root iptables -I INPUT 1 -p tcp --dport 27017 -s $ESA_IP -m comment --comment "ESATOOL" -j ACCEPT
  fi
  # Recheck of SA MONGODB PORT
  port_chkcon 27017 $SA_IP > /dev/null 2>&1
  if [[ $? -eq 1 ]]; then
    option_selected "********************************************************" "3"
    option_selected "\n\n$SA_IP:$MONGO_PORT still filtered after executing\
   ssh remote command..." "1"
    option_selected "Esatool from ESA needs to reach the mongodb \
  port in SA (normally TCP 27017)" "1"
    option_selected "Please open the TCP port $MONGO_PORT in SA or use esatool lite"
    exit
  fi

  ### EXTRA ENABLEMENT SECTION

  NODE_ID=`cat /var/lib/puppet/node_id`
  if [[ $NODE_ID == "" ]]; then
          echo -e "NODE ID NOT DETECTED, check if /var/lib/puppet/node_id exists"
  else
          echo -e "NODE_ID: $NODE_ID"
          echo -e "Check classes (base,esa)"
          echo "db.nodes.find({\"node\":\"$NODE_ID\"}).forEach(printjson)" | mongo $SA_IP/puppet
  fi



  option_selected "\n***********************************************" "3"
  echo -e "\nAfter using esatool please restart iptables in SA SERVER:"
  option_selected "service iptables restart" "3"
  fi
  ;;
  *)
  # DO NOTHING
  ;;
esac
read -p "Press [Enter] to continue"
}

#######################################
# Full Health Check
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

esa_option0() {

sar -A
option_selected "********************************************************" "1"
option_selected "Check man sar for help" "3"
read -p "Press [Enter] to return to the Main Menu"

}
#######################################
# Prints alerts (name::count::moduleid)
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

esa_option1() {

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then

  COUNT_ALERTS=`echo 'db.alert.aggregate([{ $group: { _id: "$module_name",\
  count: { $sum: 1 }}},{ $sort: { count: 1 } }])' | \
  mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet | \
  egrep "id|count" | tr -d '\t' | sed ':a;N;$!ba;s/,\n/,/g' | cut -d '"' -f4,7 |\
  tr -d '"'`
  COUNT_ALERTS=`echo -e "$COUNT_ALERTS" | sed 's/ :/:/g'`
  ROW_COUNT=`echo -e "$COUNT_ALERTS" | wc -l`

  option_selected "RULE_NAME :: MODULE_ID :: COUNT\n" "2"

  for alert_info in $(echo -e "$COUNT_ALERTS"); do
   ALERT_NAME=`echo -e $alert_info | cut -d':' -f1`

   ALERT_MODULEID=`echo "db.alert.find({module_name:\"${ALERT_NAME}\"},\
   {module_id: 1}).limit(1).pretty()" | \
   mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet | \
   grep module_id | cut -d':' -f2`

   ALERT_COUNT=`echo -e "$alert_info" | cut -d":" -f2`

   echo -e "$ALERT_NAME ::\c"
   echo -e "$ALERT_MODULEID ::\c"
   option_selected "$ALERT_COUNT\n" "3"
  done

elif [[ $ESA_SERVER_VER == 3 ]]; then
  echo -e "SQL PARAMETERS HERE"
else
  echo -e "UNSUPPORTED VERSION!"
fi
  #statements
  read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Prints alerts date range(interactive input)
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

esa_option2() {

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then

  echo -e "To return to the menu press enter until the end and answer N"
  echo -e "************************************************************"
  echo -e "From date YYYY-MM-DD (Default:$YESTERDAY)"
  read -e from_date
  from_date=${from_date:=$YESTERDAY}
  check_date $from_date
  echo -e "FROM_DATE:$from_date"
  until [ $? -eq 0 ]
  do
        read -ep "PLEASE INTRODUCE A CORRECT DATE:" from_date
        check_date $from_date
  done

  echo -e "From hour HH:MM:SS (Default:00:00:00)"
  read -e from_hour
  from_hour=${from_hour:=$DEFAULT_FROM_HOUR}
  echo -e "FROM_HOUR:"$from_hour ## COMMENT
  check_hour $from_hour
  until [ $? -eq 0 ]
  do
    read -ep "PLEASE INTRODUCE A CORRECT HOUR:" from_hour
    check_hour $from_hour
  done

  echo -e "To date YYYY-MM-DD (Default:$TODAY)"
  read -e to_date
  to_date=${to_date:=$TODAY}

  check_date $to_date
  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT DATE:" to_date
          check_date $to_date
  done


  echo -e "To hour HH:MM:SS (Default:23:59:00)"
  read -e to_hour

  to_hour=${to_hour:=$DEFAULT_TO_HOUR}

  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT HOUR:" to_hour
          check_date $to_hour
  done

  echo -e "Are you sure to query the alert count\nFROM: \
  $from_date - $from_hour \nTO: $to_date - $to_hour \n[y/N]"
  read -e option2_input
  option2_input=${option2_input:="N"}
  case $option2_input in
  [yY][eE][sS]|[yY])
    QUERY_ESA_RANGE="db.alert.aggregate([{\$match : \
    { time : { \$gt : ISODate(\"${from_date}T${from_hour}Z\"),\
    \$lte : ISODate(\"${to_date}T${to_hour}Z\")}}},\
    {\$group: { _id: \"\$module_name\", \
    count: { \$sum: 1 }}},{ \$sort: { count: 1 } }]);"
    echo -e "\nCommand executed in mongodb:\n"
    echo -e "$QUERY_ESA_RANGE\n" | tr -d ' '
    echo $QUERY_ESA_RANGE | \
    mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet | \
    grep "id" -A1
              ;;
          *)

              ;;
  esac

elif [[ $ESA_SERVER_VER == 3 ]]; then
    echo -e "SQL PARAMETERS HERE"
else
    echo -e "UNSUPPORTED VERSION!"
fi
read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Delete alerts
# Globals: $ESA_USER
#          $ESA_PASSWORD
#          $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################
esa_option3(){

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then

  TOTAL_RULES=`echo 'db.alert.aggregate({$group : {_id : "$module_name"}
   },{$group: {_id:1, count: {$sum : 1 }}})' | \
   mongo esa -u $ESA_USER -p $ESA_PASSWORD | \
   grep "result" | cut -d' ' -f11`

  echo 'db.alert.aggregate([{ $group: { _id: "$module_name", count: { $sum: 1 }}},
  { $sort: { count: 1 } }])' |\
   mongo esa -p $ESA_PASSWORD -u $ESA_USER |\
   grep "id" -A1 |  sed 's/_id/Rule/g'

  RULES_LIST=`echo 'db.alert.aggregate([{ $group: { _id: "$module_name",
  count: { $sum: 1 }}}, { $sort: { count: 1 } }])' | \
  mongo esa -p $ESA_PASSWORD -u $ESA_USER | \
  grep "_id" | cut -d':' -f2 | tr -d '",'`

  echo -e "\n Introduce the name of the rule to delete:"
  option_selected 'Example: "rule to delete",double quotes included' "3"
  read -e option3_input
  if [ ! -z $option3_input ]; then

        echo -e "Are you sure to delete RULE:($option3_input) [y/N]"
                read -e option3_input1
                case $option3_input1 in
                        [yY][eE][sS]|[yY])
                                stop_services
                                DELETE_MONGO="db.alert.remove({ module_name:${option3_input}})"
                                echo -e "\nCommand executed in mongodb $DELETE_MONGO \n"
                                echo -e "$DELETE_MONGO" | \
          mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet

          echo -e "Reindexing alert collection"

          REINDEX_MONGO="db.alert.reIndex()"
                                echo -e "\nCommand executed in mongodb $REINDEX_MONGO \n"

          echo $REINDEX_MONGO | \
          mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet \
          > /dev/null 2>&1

          start_services
                        ;;
                        *)

                        ;;
      esac
  fi

elif [[ $ESA_SERVER_VER == "3" ]]; then
    echo -e "SQL PARAMETERS HERE"
else
    echo -e "UNSUPPORTED VERSION!"
fi
read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Remove license
# Globals: $SA_IP
# Arguments: NONE
# Returns: NONE
#######################################

esa_option4(){

echo -e "This option will remove the license from ESA "

read -e -p "Are you sure? [y/N]" option4_input
  case $option4_input in
  [yY][eE][sS]|[yY])
   stop_services
    echo -e "Removing legacy license\n"
    rm -fr /tmp/esa_backup && mkdir -p /tmp/esa_backup
    echo -e "Creating backup in /tmp/esa_backup..."
    echo -e "Moving /opt/rsa/esa/trustedStorage /tmp/esa_backup"
    echo -e "Moving /etc/netwitness/ng/nwmaster9.bin /tmp/esa_backup\n"
    mv /opt/rsa/esa/trustedStorage /tmp/esa_backup
    mv /etc/netwitness/ng/nwmaster9.bin /tmp/esa_backup
    ESA_ENTITLEMENT_COUNT=`echo 'db.entitlement.count({deviceName:"ESA"})' | \
    mongo sa --host $SA_IP --quiet`
    if [[ $ESA_ENTITLEMENT_COUNT -eq 1 ]]; then
      echo 'db.entitlement.find({deviceName: "ESA"}).pretty()' | mongo sa \
      --host $SA_IP --quiet
      ESA_ENTITLEMENT=`echo 'db.entitlement.find({deviceName: "ESA"}).pretty()' | \
      mongo sa --host $SA_IP --quiet | \
      grep "_id" | cut -d'(' -f2 | tr -d '"),'`
      echo -e "db.entitlement.remove({_id:${ESA_ENTITLEMENT}})"
    elif [[ $ESA_ENTITLEMENT_COUNT -eq 0 ]]; then
      echo "NO ENTITLEMENTS FOUND!!!"
      #statements
    else
      echo "Several entries found!"
    fi
    start_services
            ;;
        *)

            ;;
    esac
read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Delete date range alerts
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
#          $TODAY
#          $YESTERDAY
# Arguments: NONE
# Returns: NONE
#######################################


esa_option5(){

database_size
if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
  echo -e "Do you want to count the alerts? (Recommended N if the database is huge)"
  read -e esa_option5_count
  case $esa_option5_count in
    [yY][eE][sS]|[yY])
      TOTAL_RULES=`echo 'db.alert.aggregate({$group : {_id : "$module_name"} },
      {$group: {_id:1, count: {$sum : 1 }}})' |\
      mongo esa -u $ESA_USER -p $ESA_PASSWORD | \
      grep "result" | cut -d' ' -f11`

      echo 'db.alert.aggregate([{ $group: { _id: "$module_name", count: { $sum: 1 }}},
      { $sort: { count: 1 } }])' | \
      mongo esa -p $ESA_PASSWORD -u $ESA_USER | \
      grep "id" -A1 |  sed 's/_id/Rule/g'

        ;;
    [nN])
      echo -e "Aborting Count"
        ;;
    *)
      echo -e "Aborting Count"
        ;;
  esac
    #statements

  echo -e "\nIntroduce the name of the rule to delete. Example:"
  option_selected "\"rule to delete\" or ALLRULES for all alerts" "3"
  read -e rule_delete

  # Checking before the query(below) if ALLRULES IS SET

  echo -e "TODAY is: $TODAY"
  echo -e "From date YYYY-MM-DD (Default:$YESTERDAY)"
  read -e from_date
  from_date=${from_date:=$YESTERDAY}
  check_date $from_date
  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT DATE:" from_date
          check_date $from_date
  done

  echo -e "From hour HH:MM:SS (Default:00:00:00)"
  read -e from_hour
  from_hour=${from_hour:=$DEFAULT_FROM_HOUR}

  check_hour $from_hour
  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT HOUR:" from_hour
          check_hour $from_hour
  done

  echo -e "To date YYYY-MM-DD (Default:$TODAY)"
  read -e to_date
  to_date=${to_date:=$TODAY}

  check_date $to_date
  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT DATE:" to_date
          check_date $to_date
  done


  echo -e "To hour HH:MM:SS (Default:23:59:00)"
  read -e to_hour

  to_hour=${to_hour:=$DEFAULT_TO_HOUR}

  until [ $? -eq 0 ]
  do
          read -ep "PLEASE INTRODUCE A CORRECT HOUR:" to_hour
          check_date $to_hour
  done

  echo -e "***********************************************"

  if [[ $rule_delete == "ALLRULES" ]]; then
    echo -e "ARE YOU SURE TO DELETE ALL ALERTS?"

   else

    echo -e "Are you sure to delete the alerts of the\nRULE:$rule_delete"
  fi
  echo -e "FROM: $from_date - $from_hour \nTO: $to_date - $to_hour \n[y/N]"
  read -e option5_input
  option5_input=${option5_input:="N"}
  case $option5_input in
          [yY][eE][sS]|[yY])
                stop_services
                if [[ $rule_delete == "ALLRULES" ]]; then

                        QUERY_ESA_RANGE="db.alert.remove({ \$and:
        [{ time:{\$gte: ISODate(\"${from_date}T${from_hour}Z\")}},
        { time: {\$lte: ISODate(\"${to_date}T${to_hour}Z\")}}]})"
                else
                        QUERY_ESA_RANGE="db.alert.remove({ \$and:
        [{ time:{\$gte: ISODate(\"${from_date}T${from_hour}Z\")}},
        { time: {\$lte: ISODate(\"${to_date}T${to_hour}Z\")}},
        {module_name: $rule_delete}]})"
                fi
      echo -e "\nCommand executed in mongodb:\n $QUERY_ESA_RANGE\n"

      echo "$QUERY_ESA_RANGE" | mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet

      echo -e "Reindexing alert collection"
                QUERY_ESA_REINDEX='db.alert.reIndex()'
                echo -e "\nCommand executed in mongodb:\n $QUERY_ESA_REINDEX\n"

      echo $QUERY_ESA_REINDEX | \
      mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet

      start_services
              ;;
          *)

              ;;
  esac
fi

read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Delete IM incidents & alerts
# Globals: $ESA_SERVER_VER
#          $IM_USER
#          $IM_PASSWORD
#          $TODAY
#          $YESTERDAY
# Arguments: NONE
# Returns: NONE
#######################################

esa_option6(){

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then

  echo -e "Do you want to delete all alerts and incidents from IM[y/N]"
  read -e option6_input
  option6_input=${option6_input:="N"}
  case $option6_input in
    [yY][eE][sS]|[yY])
    IM_INCIDENT_REMOVE="db.incident.remove()"
    IM_ALERT_REMOVE="db.alert.remove()"
    echo -e "Command executed in Mongodb: $IM_INCIDENT_REMOVE"
    echo 'db.incident.remove()' | mongo im -u $IM_USER -p $IM_PASSWORD
    echo -e "Command executed in Mongodb: $IM_ALERT_REMOVE"
    echo 'db.alert.remove()' | mongo im -u $IM_USER -p $IM_PASSWORD
    ;;
      *)
    ;;

  esac
fi
read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Parses running rules in ESA
# Globals: $ESA_SERVER_VER
# Arguments: NONE
# Returns: NONE
#######################################

esa_option7(){
if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
  EPL_ESA_FILE='/opt/rsa/esa/conf/eplModuleManager.json'
    if [[ -e $EPL_ESA_FILE ]]; then
      sed -e 's/\\\\n/\n/g' -e 's/\\\\r//g' -e 's/\\\\t//g' -e 's/\\\"/\"/g' \
      $EPL_ESA_FILE 2>&1 | tee /root/parsed_rules.txt
    else
      echo -e "$EPL_ESA_FILE not found"
    fi
  option_selected "\n\n\n\nCreated /root/parsed_rules.txt" "3"
  echo -e "\n*********************************************************\n"
  read -p "Press [Enter] to return to the Main Menu"
fi
}

#######################################
# Matches moduleid with rules
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

esa_option8(){
if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
  for moduleid in $(echo 'db.alert.aggregate([{$group:{ _id :"$module_id"}}])'\
   | mongo esa -u $ESA_USER -p $ESA_PASSWORD | grep id |\
    cut -d':' -f2);do echo "db.alert.find({ module_id:"$moduleid"},
    {module_name:1,module_id:1,_id:0}).limit(1)" |\
    mongo esa -u $ESA_USER -p $ESA_PASSWORD |\
    grep module_id; done
fi

read -p "Press [Enter] to return to the Main Menu"

}

#######################################
# Show collections in ESA and SA SERVER
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
#          $SA_IP
# Arguments: NONE
# Returns: NONE
#######################################

esa_option9(){
if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
  SA_IP=`grep "puppetmaster.local" /etc/hosts | cut -d' ' -f1`
  QUERY_COLLECTIONS='show collections'
  option_selected "Command executed in mongodb ESA:" "2"
  echo -e "$QUERY_COLLECTIONS"
  echo "$QUERY_COLLECTIONS" |\
  mongo esa -p $ESA_PASSWORD -u $ESA_USER
  option_selected "\nCommand executed in mongodb SA SERVER:" "2"
  echo -e "$QUERY_COLLECTIONS"
  echo "$QUERY_COLLECTIONS" | mongo sa --host $SA_IP
fi
read -p "Press [Enter] to return to the Main Menu"
}

#######################################
# Delete all alerts
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

esa_option10(){
if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
  RANDOM_NUMBER=`shuf -i100000-1000000 -n1`
  echo -e "SECURITY NUMBER:$RANDOM_NUMBER"
  echo -e "Introduce the number above to DELETE ALL ALERTS:"
  read -e option10_input
  if [ "$option10_input" == "$RANDOM_NUMBER" ]; then
        stop_services
        echo "db.alert.drop()" | mongo esa \
    -u $ESA_USER -p $ESA_PASSWORD
        start_services
  fi
fi
  read -p "Press [Enter] to return to the Main Menu"
  }

#######################################
# Disable rules 10.4 / Delete in 10.5
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

esa_option11(){

if [[ $ESA_SERVER_VER == 4 ]]; then
 stop_services
 echo -e "All rules disabled in /opt/rsa/esa/conf/eplModuleManager.json"
 sed -i 's/\\\"enabled\\\": true/\\\"enabled\\\": false /g' \
/opt/rsa/esa/conf/eplModuleManager.json
 start_services
  read -p "Press [Enter] to return to the Main Menu"
elif [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 ]]; then
  echo -e "Stop esa (service rsa-esa stop)"
  echo -e "Delete manually /opt/rsa/esa/conf/eplModuleManager.json"
  echo -e "Start esa (service rsa-esa start)"
  echo -e "Remove the rule/s in the syncronization that are making the system crash"
  echo -e "Syncronize again"
  echo -e "Check if the system is stable now"
  read -p "Press [Enter] to return to the Main Menu"
fi
}

#######################################
# Enables Index optimization
# Globals: $ESA_SERVER_VER
#          $ESA_USER
#          $ESA_PASSWORD
# Arguments: NONE
# Returns: NONE
#######################################

esa_option12(){

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
  INDEX_QUERY='db.alert.ensureIndex({time:1}, {background:true})'
  echo -e "Do you want to optimize alert collection index? [y/N]"
  read -e option12_input
  option12_input=${option12_input:="N"}
  case $option12_input in
    [yY][eE][sS]|[yY])
        echo -e " Command executed in mongodb: $INDEX_QUERY"
        echo $INDEX_QUERY | \
    mongo esa -u $ESA_USER -p $ESA_PASSWORD --quiet
        ;;
    *)
        ;;
  esac
fi
read -p "Press [Enter] to return to the Main Menu"
}

#######################
## MAIN()
#######################

clear
minimal_check
show_menu_precheck $ESA_SERVER_VER
precheck_esatool $ESA_SERVER_VER
clear
show_menu $ESA_SERVER_VER

if [[ $ESA_SERVER_VER == 6 || $ESA_SERVER_VER == 5 || $ESA_SERVER_VER == 4 ]]; then
      while [ opt != '' ]
        do
        if [[ $opt = "" ]]; then
                exit;
        else
            case $opt in
              0) clear;
              option_selected "Option 0 Selected" "4";
        esa_option0
        show_menu $ESA_SERVER_VER;
              ;;
            1) clear;
            option_selected "Option 1 Selected" "4";
        esa_option1
        show_menu $ESA_SERVER_VER;
            ;;

            2) clear;
                option_selected "Option 2 Selected" "4";
                esa_option2
        show_menu $ESA_SERVER_VER;
                ;;

            3) clear;
                option_selected "Option 3 Selected" "4";
                esa_option3
        show_menu $ESA_SERVER_VER;
                ;;

            4) clear;
                option_selected "Option 4 Selected" "4";
                        esa_option4
                show_menu $ESA_SERVER_VER;
                ;;
            5) clear;
                option_selected "Option 5 Selected" "4";
                        esa_option5
                show_menu $ESA_SERVER_VER;
                ;;
            6) clear;
                option_selected "Option 6 Selected" "4";
                        esa_option6
                show_menu $ESA_SERVER_VER;
                ;;
            7) clear;
                option_selected "Option 7 Selected" "4";
                        esa_option7
                show_menu $ESA_SERVER_VER;
                ;;

            8) clear;
                option_selected "Option 8 Selected" "4";
                        esa_option8
                show_menu $ESA_SERVER_VER;
                ;;
            9) clear;
                option_selected "Option 9 Selected" "4";
                        esa_option9
                show_menu $ESA_SERVER_VER;
                ;;
            10) clear;
                option_selected "Option 10 Selected" "4";
                        esa_option10
                show_menu $ESA_SERVER_VER;
            ;;
            11) clear;
                option_selected "Option 11 Selected" "4";
                        esa_option11
                show_menu $ESA_SERVER_VER;
            ;;
            12) clear;
                option_selected "Option 12 Selected" "4";
                        esa_option12
                show_menu $ESA_SERVER_VER;
            ;;
            13) clear;
                option_selected "Option 13 Selected" "4";
                        esa_option13
                show_menu $ESA_SERVER_VER;
            ;;
            14) clear;
                option_selected "Option 14 Selected" "4";
                        esa_option14
                show_menu $ESA_SERVER_VER;
            ;;
            x)exit;
            ;;

            \n)exit;
            ;;

            *)clear;
            option_selected "Select an option from the menu";
            show_menu $ESA_SERVER_VER;
            ;;
        esac
        fi
done
else
  echo -e "UNSUPPORTED VERSION! Aborting..."
  exit 0
fi

